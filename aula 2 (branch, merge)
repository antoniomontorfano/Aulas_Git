*Branch
    branch é tipo adicionar outros galhos
    pra eu fazer novos commits em outros caminhos(galhos) e,caso dê certo, adicionar à minha branch master de novo, por meio do 'git merge (nome da branch)'
    se enquanto eu tenha feito novos commits na nova branch, eu nao tenha feito nenhum commit na branch master, e dps eu deseje faer um 'merge' entre essas duas branches, eu digo que fiz um merge do tipo 'fast foward'
*Criacao da branch:
    - 'git branch (nome)'
    - tambem posso criar usando o metodo 'git checkout -b (nomeio)' (ja crio e entro na branch ao msm tempo)
*Merge fast foward:
    -se eu criar uma branch nova, fazer uns commits e nao mexer na master nesse meio tempo, qnd eu fizer um merge, o git vai interpretar como  se eu nem tivesse criado outra branch. 
    -na real a branch ainda vai existir, mas qnd eu deletar essa branch usando o 'git branch -d (nome)', e meter o 'git log' ou o 'git log --graph' ou o 'git log --graph --oneline', ele vai registrar apenas uma branch no historico
    -coisa que nao aconteceria se eu fizesse um merge usando o 'recursive strategy'
*Merge 'Recursive strategy':
    -nesse caso criei outra branch mas fiz alteracoes na branch master e na nova branch tbm.
    -se as alteracoes nao forem no msm arquivo, ele fara o merge sem mtos problemas, e ficará registrado no historico da master que houve uma outra branch no processo de versionamento, ficando claro tanto no 'git log' (um commit indicando apenas a merge), quando no 'git log --graph --oneline'
    #Conflito:
        no caso de alteracoes no mesmo arquivo, o git indicara que houve um conflito e tbm indicara que está acontecendo um merging ate que o arquivo seja alterado, adicionado e commitado.
        
